print-%  : ; @echo $* = $($*)
PROJECT_NAME   = {{project_name}}
PROJECT_PATH   = $(PROJECT_NAME)
SHELL          = /bin/bash
SOURCE_FOLDERS = $(PROJECT_PATH) examples csrc tests docs
PYTHON_FILES   = $(shell find $(SOURCE_FOLDERS) -type f -name "*.py" -o -name "*.pyi")
CXX_FILES      = $(shell find $(SOURCE_FOLDERS) -type f -name "*.h" -o -name "*.cc")
CUDA_FILES     = $(shell find $(SOURCE_FOLDERS) -type f -name "*.cuh" -o -name "*.cu")
COMMIT_HASH    = $(shell git log -1 --format=%h)
PATH           := $(HOME)/go/bin:$(PATH)
PYTHON         ?= $(shell command -v python3 || command -v python)
CLANG_FORMAT   ?= $(shell command -v clang-format-17 || command -v clang-format)
PYTESTOPTS     ?=

# PHONY targets
.PHONY: help
.PHONY: create-env
.PHONY: addlicense-install docstyle-install docs-install spelling-install test-install
.PHONY: lint lint-flake8 lint-black lint-isort code-format code-format-black code-format-autopep8 code-format-isort
.PHONY: install install-editable uninstall build clean-build clean-py clean reinstall
.PHONY: addlicense docstyle docs spelling clean-docs
.PHONY: test pytest

# Default target when 'make' is run without arguments
.DEFAULT_GOAL := help

# Browser Python script to open a given file in a web browser
define BROWSER_PYSCRIPT
import os, webbrowser, sys
from urllib.request import pathname2url
webbrowser.open("file://" + pathname2url(os.path.abspath(sys.argv[1])))
endef
export BROWSER_PYSCRIPT

# Help Python script to print out makefile documentation
define HELP_PYSCRIPT
import re, sys
for line in sys.stdin:
	match = re.match(r'^([a-zA-Z_-]+):.*?## (.*)$$', line)
	if match:
		target, help = match.groups()
		print("%-20s %s" % (target, help))
endef
export HELP_PYSCRIPT

# Set browser command
BROWSER := python -c "$$BROWSER_PYSCRIPT"

.ONESHELL:
ENV_PREFIX=$(shell python -c "if __import__('pathlib').Path('.venv/bin/pip').exists(): print('.venv/bin/')")
USING_POETRY=$(shell grep "tool.poetry" pyproject.toml && echo "yes")

.PHONY: help
help:             ## Show the help.
	@echo "Usage: make <target>"
	@echo ""
	@echo "Targets:"
	@fgrep "##" Makefile | fgrep -v fgrep


.PHONY: show
show:             ## Show the current environment.
	@echo "Current environment:"
	@if [ "$(USING_POETRY)" ]; then poetry env info && exit; fi
	@echo "Running using $(ENV_PREFIX)"
	@$(ENV_PREFIX)python -V
	@$(ENV_PREFIX)python -m site


# help target: display targets and descriptions
help:
	@python -c "$$HELP_PYSCRIPT" < $(MAKEFILE_LIST)

################ Environments ################

DEFAULT_ENV_FILE = environment.yml

# create conda environment from environment.yml
# Note: Micromamba is a faster alternative to conda
create-env:
	@conda env create -f $(DEFAULT_ENV_FILE) -p ./env

############ Linter And Formatter ############

# lint-flake8 target: verify style with flake8
lint-flake8:
	@flake8 {{project_name}}

# lint-black target: verify style with black
lint-black:
	@black --check {{project_name}}

# lint-isort target: verify style with isort
lint-isort:
	@isort --check-only --profile black {{project_name}}

# lint target: run all linters
lint: lint-isort lint-black

# format-black target: format code using black
format-black:
	@black {{project_name}}

# format-autopep8 target: format code using autopep8
format-autopep8:
	@autopep8 --in-place --aggressive --aggressive --recursive {{project_name}}/

# format-isort target: format code using isort
format-isort:
	@isort --profile black {{project_name}}

# format target: run all formatters
format: format-isort format-autopep8 format-black

################## LICENSE ###################

# Check if go is installed
check-go:
	@echo "Checking go installation..."
	@go version

# Install license header tool
addlicense-install: check-go
	@go install github.com/google/addlicense@latest

# Check if license header is present in all files
check-license: check-go
	@echo "Checking license headers..."
	@addlicense -check -f LICENSE -y 2023-$(shell date +"%Y") $(SOURCE_FOLDERS)

addlicense: addlicense-install
	@addlicense -ignore tests/coverage.xml -f LICENSE -y 2023-$(shell date +"%Y") $(SOURCE_FOLDERS)

############ Documentation ############

# Install documentation dependencies
docs-install:
	@pip install sphinx sphinx_autobuild pydocstyle doc8

docstyle: docs-install
	@make -C docs clean
	@$(PYTHON) -m pydocstyle $(PROJECT_PATH) && doc8 docs && make -C docs html SPHINXOPTS="-W"

docs: docs-install
	@$(PYTHON) -m sphinx_autobuild --watch $(PROJECT_PATH) --open-browser docs/source docs/build

spelling: docs-install
	@make -C docs clean
	@make -C docs spelling SPHINXOPTS="-W"

clean-docs:
	@rm -fr ./docs/build/
	@rm -fr ./docs/html/
	@rm -fr ./docs/doctrees/

############ Build and Install ############

# install target: install Python package
install:
	@$(PYTHON) -m pip install -vvv .

# install-dev target: install Python package in development mode
install-editable:
	@USE_FP16=ON TORCH_CUDA_ARCH_LIST=Auto $(PYTHON) -m pip install -vvv --no-build-isolation --editable .

install-e: install-editable  # alias

uninstall:
	@$(PYTHON) -m pip uninstall -y $(PROJECT_NAME)

# build target: build Python package
build:
	@$(PYTHON) -m pip install --upgrade pip
	@$(PYTHON) -m pip install --upgrade setuptools wheel build
	@$(PYTHON) -m build

# clean-build target: remove build artifacts
clean-build:
	@rm -fr build/
	@rm -fr dist/
	@rm -rf *.egg-info

# clean-py: remove Python file artifacts
clean-py:
	@find . -type f -name  '*.py[co]' -delete
	@find . -depth -type d -name "__pycache__" -exec rm -r "{}" +
	@find . -depth -type d -name ".ruff_cache" -exec rm -r "{}" +
	@find . -depth -type d -name ".mypy_cache" -exec rm -r "{}" +
	@find . -depth -type d -name ".pytest_cache" -exec rm -r "{}" +
	@find . -depth -type d -name ".coverage" -exec rm -r "{}" +
	@find . -depth -type d -name "coverage.xml" -exec rm -r "{}" +

clean: clean-py clean-build clean-docs

# reinstall target: clean build, build and install Python package
reinstall: clean build install

# Tests

pytest: test-install
	@pytest --verbose --color=yes --durations=0 \
		--cov-config=.coveragerc --cov-report=xml:tests/coverage.xml --cov-report=term-missing \
		--cov="$(PROJECT_PATH)" tests/

test: pytest

.PHONY: install
install:          ## Install the project in dev mode.
	@if [ "$(USING_POETRY)" ]; then poetry install && exit; fi
	@echo "Don't forget to run 'make virtualenv' if you got errors."
	$(ENV_PREFIX)pip install -e .[test]

.PHONY: fmt
fmt:              ## Format code using black & isort.
	$(ENV_PREFIX)isort project_template_python_only/
	$(ENV_PREFIX)black -l 79 project_template_python_only/
	$(ENV_PREFIX)black -l 79 tests/

.PHONY: lint
lint:             ## Run pep8, black, mypy linters.
	$(ENV_PREFIX)flake8 project_template_python_only/
	$(ENV_PREFIX)black -l 79 --check project_template_python_only/
	$(ENV_PREFIX)black -l 79 --check tests/
	$(ENV_PREFIX)mypy --ignore-missing-imports project_template_python_only/

.PHONY: test
test: lint        ## Run tests and generate coverage report.
	$(ENV_PREFIX)pytest -v --cov-config .coveragerc --cov=project_template_python_only -l --tb=short --maxfail=1 tests/
	$(ENV_PREFIX)coverage xml
	$(ENV_PREFIX)coverage html

.PHONY: watch
watch:            ## Run tests on every change.
	ls **/**.py | entr $(ENV_PREFIX)pytest -s -vvv -l --tb=long --maxfail=1 tests/

.PHONY: clean
clean:            ## Clean unused files.
	@find ./ -name '*.pyc' -exec rm -f {} \;
	@find ./ -name '__pycache__' -exec rm -rf {} \;
	@find ./ -name 'Thumbs.db' -exec rm -f {} \;
	@find ./ -name '*~' -exec rm -f {} \;
	@rm -rf .cache
	@rm -rf .pytest_cache
	@rm -rf .mypy_cache
	@rm -rf build
	@rm -rf dist
	@rm -rf *.egg-info
	@rm -rf htmlcov
	@rm -rf .tox/
	@rm -rf docs/_build

.PHONY: virtualenv
virtualenv:       ## Create a virtual environment.
	@if [ "$(USING_POETRY)" ]; then poetry install && exit; fi
	@echo "creating virtualenv ..."
	@rm -rf .venv
	@python3 -m venv .venv
	@./.venv/bin/pip install -U pip
	@./.venv/bin/pip install -e .[test]
	@echo
	@echo "!!! Please run 'source .venv/bin/activate' to enable the environment !!!"

.PHONY: release
release:          ## Create a new tag for release.
	@echo "WARNING: This operation will create s version tag and push to github"
	@read -p "Version? (provide the next x.y.z semver) : " TAG
	@echo "$${TAG}" > project_template_python_only/VERSION
	@$(ENV_PREFIX)gitchangelog > HISTORY.md
	@git add project_template_python_only/VERSION HISTORY.md
	@git commit -m "release: version $${TAG} ðŸš€"
	@echo "creating git tag : $${TAG}"
	@git tag $${TAG}
	@git push -u origin HEAD --tags
	@echo "Github Actions will detect the new tag and release the new version."

.PHONY: docs
docs:             ## Build the documentation.
	@echo "building documentation ..."
	@$(ENV_PREFIX)mkdocs build
	URL="site/index.html"; xdg-open $$URL || sensible-browser $$URL || x-www-browser $$URL || gnome-open $$URL

.PHONY: switch-to-poetry
switch-to-poetry: ## Switch to poetry package manager.
	@echo "Switching to poetry ..."
	@if ! poetry --version > /dev/null; then echo 'poetry is required, install from https://python-poetry.org/'; exit 1; fi
	@rm -rf .venv
	@poetry init --no-interaction --name=a_flask_test --author=rochacbruno
	@echo "" >> pyproject.toml
	@echo "[tool.poetry.scripts]" >> pyproject.toml
	@echo "project_template_python_only = 'project_template_python_only.__main__:main'" >> pyproject.toml
	@cat requirements.txt | while read in; do poetry add --no-interaction "$${in}"; done
	@cat requirements-test.txt | while read in; do poetry add --no-interaction "$${in}" --dev; done
	@poetry install --no-interaction
	@mkdir -p .github/backup
	@mv requirements* .github/backup
	@mv setup.py .github/backup
	@echo "You have switched to https://python-poetry.org/ package manager."
	@echo "Please run 'poetry shell' or 'poetry run project_template_python_only'"

.PHONY: init
init:             ## Initialize the project based on an application template.
	@./.github/init.sh
